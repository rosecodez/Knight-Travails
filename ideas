Computer science theory - graphs

 Khan Academy computer science theory lesson 
https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs

- odin mentions graphs to help me visualize the move of the knight;

- a graph represents a common line between the elements, 
  so all the elements ''know each other'' 
  (so even if an element was not visited yet, 
  the path is known to it, it's just not yet stepped on), 
  relationship goes both ways;

- each spot can be seen as a node, 
  it can take values, in this case it takes 2:
-> `a column n` and `a row n`
`graph` = `network`;
`vertices` = `square on the board`;
`vertex` = `one vertices`;
`edges` = `arrows`
In the case of a road map, if you want to find the shortest route between two locations, 
you're looking for a path between two vertices with the minimum sum of edge weights
over all paths between the two vertices. As with unweighted graphs, we call such a path a shortest path.
- the knight can traverse every square on the board -> `relationship between the squares goes both ways`


- graph helps modeling `relationships` in real world

Representation:
- `array` = with `edges`, called `edge list`
- `edge` = `array with 2 vertex numbers`

example: `[ [0,1], [0,6], [0,8], [1,4], [1,6], [1,9], [2,4], [2,6], [3,4], [3,5],
[3,8], [4,5], [4,9], [7,8], [7,9] ]`
![source: Khan Academy](image-3.png)

- `adjacency matrix` has a V x V (vertices) matrix of 0s and 1s, where the entry in row i, and column j is 1,
if and only if the edge is in the graph (i,j).

example: `[ [0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
  [1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
  [0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
  [0, 1, 1, 1, 0, 1, 0, 0, 0, 1],
  [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
  [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
  [1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
  [0, 1, 0, 0, 1, 0, 0, 1, 0, 0] ]`

![source: Khan Academy](image-4.png)

- `adjacency lists`

![source: Khan Academy](image-5.png)

`[ [1, 6, 8],
  [0, 4, 6, 9],
  [4, 6],
  [4, 5, 8],
  [1, 2, 3, 5, 9],
  [3, 4],
  [0, 1, 2],
  [8, 9],
  [0, 3, 7],
  [1, 4, 7] ]`


Breadth first search algorithm has:
- `distance` =  giving the minimum number of edges in any path from the source vertex to vertex v
- `predecessor` = vertex of v along some shortest path from the source vertex. It is some special value, such as null, indicating that it has no predecessor.
If there is no path from the source to vertex, then the distance is infinite and its predecessor has the same special value as the source's predecessor

-> a vertex's distance is null until it has been visited, where it gets a numeric value for its distance

-> `queue` = data structure that allows us to insert and remove items, where the item removed is always the one that has been in the queue the longest *first in, first out*(concept)
-> `enqueue(obj)` = inserts an object into the queue

-> `dequeue` = removes from the queue the object that has been in the longest, returning this object;

-> `isEmpty()` returns true if the queue currently contains no objects, and false if the queue contains at least one object

- whenever we visit any vertex, we enqueue it(insert into queue)

->placing a knight randomly on a chessboard, it can take 8 possible positions
-> if all the possible positions, that can be reached from the initial position are not visited, we `enqueue` this state into a `queue`. also increase the numbers of moves by 1 from the last state in the queue
-> at each new position, we will check if the current position is the destination position or not. if the current is not the destination, we will take the current position from the queue and enqueue the possible positions it can move from the current position.
->> continue until will reach the destination position or explore all the possible positions on a chessboard

`Visualization of the gameboard squares:`

![Alt text](image-6.png)

-> `2D Arrays (Arrays in Arrays)`
- it will be helpful to store the indexes (rows and columns) for each square
`Example`: [3,4] = `3` represents the row and `4` represents the column