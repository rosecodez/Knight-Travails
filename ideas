Computer science theory - graphs

 Khan Academy computer sciency theory lesson 
https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs

- odin mentions graphs to help me visualize the move of the knight;

- a graph represents a common line between the elements, 
  so all the elements ''know each other'' 
  (so even if an element was not visited yet, 
  the path is known to it, it's just not yet stepped on), 
  relationship goes both ways;

- each spot can be seen as a node, 
  it can take values, in this case it takes 2:
-> `a column n` and `a row n`
`graph` = `network`;
`vertices` = `square on the board`;
`vertex` = `one vertices`;
`edges` = `arrows`
In the case of a road map, if you want to find the shortest route between two locations, 
you're looking for a path between two vertices with the minimum sum of edge weights
over all paths between the two vertices. As with unweighted graphs, we call such a path a shortest path.
- the knight can traverse every square on the board -> `relationship between the squares goes both ways`
![Alt text](image-2.png)

- graph helps modeling `relationships` in real world

Representation:
- `array` = with `edges`, called `edge list`
- `edge` = `array with 2 vertex numbers`

example: `[ [0,1], [0,6], [0,8], [1,4], [1,6], [1,9], [2,4], [2,6], [3,4], [3,5],
[3,8], [4,5], [4,9], [7,8], [7,9] ]`
![source: Khan Academy](image-3.png)

- `adjacency matrix` has a V x V (vertices) matrix of 0s and 1s, where the entry in row i, and column j is 1,
if and only if the edge is in the graph (i,j).

example: `[ [0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
  [1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
  [0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
  [0, 1, 1, 1, 0, 1, 0, 0, 0, 1],
  [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
  [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
  [1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
  [0, 1, 0, 0, 1, 0, 0, 1, 0, 0] ]`

![source: Khan Academy](image-4.png)

- `adjacency lists`

![source: Khan Academy](image-5.png)

`[ [1, 6, 8],
  [0, 4, 6, 9],
  [4, 6],
  [4, 5, 8],
  [1, 2, 3, 5, 9],
  [3, 4],
  [0, 1, 2],
  [8, 9],
  [0, 3, 7],
  [1, 4, 7] ]`


Breadth first search algorithm has:
- `distance` =  giving the minimum number of edges in any path from the source vertex to vertex v
- `predecessor` = vertex of v along some shortest path from the source vertex. It is some special value, such as null, indicating that it has no predecessor.
If there is no path from the source to vertex, then the distance is infinite and its predecessor has the same special value as the source's predecessor
